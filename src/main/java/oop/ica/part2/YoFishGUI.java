/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package oop.ica.part2;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumn;

/**
 *
 * @author Yuvraj Haryan D3581054
 */
public class YoFishGUI extends javax.swing.JFrame {

    /**
     * Creates new form YoFishGUI
     */
    public YoFishGUI() {
        
        // List all methods that need to run before the form is loaded
        
        // Load Yo-Fish data from the input file into an ArrayList
        loadData();
        
        // Load Pndlife data from the input file and append to teh same ArrayList
        loadPondLifeData();
        
        // load images to the buffered image array list
        loadYoFishImages();
        
        // This is a generated method for loading the Jform
        initComponents();
        
        // Load the Jtable
        initTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        picPanel = new javax.swing.JPanel();
        picLabel = new javax.swing.JLabel();
        itemLabel = new javax.swing.JLabel();
        buyButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        quitButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        yoFishTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Yo-Fish");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        picPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Item Photo"));

        picLabel.setBackground(new java.awt.Color(0, 0, 0));
        picLabel.setForeground(new java.awt.Color(255, 255, 255));
        picLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        picLabel.setOpaque(true);

        itemLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        itemLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout picPanelLayout = new javax.swing.GroupLayout(picPanel);
        picPanel.setLayout(picPanelLayout);
        picPanelLayout.setHorizontalGroup(
            picPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, picPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(picPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(itemLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                    .addComponent(picLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE))
                .addContainerGap())
        );
        picPanelLayout.setVerticalGroup(
            picPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(picPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(picLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(itemLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                .addContainerGap())
        );

        buyButton.setText("Buy");
        buyButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buyButtonMouseClicked(evt);
            }
        });
        buyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyButtonActionPerformed(evt);
            }
        });

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        quitButton.setBackground(new java.awt.Color(204, 0, 0));
        quitButton.setForeground(new java.awt.Color(255, 255, 255));
        quitButton.setText("Quit");
        quitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitButtonActionPerformed(evt);
            }
        });

        yoFishTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        yoFishTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                yoFishTableMouseClicked(evt);
            }
        });
        yoFishTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                yoFishTableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                yoFishTableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(yoFishTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 456, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buyButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(quitButton))
                    .addComponent(picPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(picPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buyButton)
                            .addComponent(addButton)
                            .addComponent(quitButton))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void yoFishTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_yoFishTableMouseClicked
        // store the previously selected item index
        prevSelectedItemIndex = yoFishItemSelectedIndex;
        // get the index of the item selected
        yoFishItemSelectedIndex = yoFishTable.getSelectedRow();
        // display image of the selected item
        displayImage();
        // Check if stock is low
        checkLowStock();
    }//GEN-LAST:event_yoFishTableMouseClicked

    private void yoFishTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_yoFishTableKeyPressed
        // store the previously selected item index
        prevSelectedItemIndex = yoFishItemSelectedIndex;
        // get the index of the item selected
        yoFishItemSelectedIndex = yoFishTable.getSelectedRow();
        // display image of the selected item
        displayImage();
        // Check if stock is low
        checkLowStock();
    }//GEN-LAST:event_yoFishTableKeyPressed

    private void yoFishTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_yoFishTableKeyReleased
        // store the previously selected item index
        prevSelectedItemIndex = yoFishItemSelectedIndex;
        // get the index of the item selected
        yoFishItemSelectedIndex = yoFishTable.getSelectedRow();
        // display image of the selected item
        displayImage();
        // Check if stock is low
        checkLowStock();
    }//GEN-LAST:event_yoFishTableKeyReleased

    private void buyButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buyButtonMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_buyButtonMouseClicked

    private void buyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyButtonActionPerformed
        // get the index of the item selected
        yoFishItemSelectedIndex = yoFishTable.getSelectedRow();
        
        // Check if an item is selected from the table
        if (yoFishTable.getSelectedRow() >= 0) {
            
            String item = yoFishItemList.get(yoFishItemSelectedIndex).getItem();
            int stock = yoFishItemList.get(yoFishItemSelectedIndex).getStock();
            
            // If item is in stock
            if(stock > 0)
            {
                // Create an input options array for the available stock
                Integer[] options = new Integer[stock];

                // populate the options array
                for(int value = 1; value<=stock; value++) {
                    options[value - 1] = value;
                }

                // Create an input dialog displaying the options array
                Object inputValue = JOptionPane.showInputDialog(
                        null,
                        "Please select the units to buy",
                        "Buying " + item,
                        JOptionPane.QUESTION_MESSAGE,
                        null,
                        options,
                        options[0]
                );

                // check if input value is null
                if(inputValue != null) {
                    int buyStock = (int)inputValue;

                    // Call buy method
                    buyItem(buyStock);
                }
            }
            else
            {
                // Show warning if the item has 0 stock
                JOptionPane.showInternalMessageDialog(
                    null,
                    "Apologies, " + item + " is out of stock!",
                    "Warning",
                    JOptionPane.WARNING_MESSAGE
                );
            }
        }
        else{
            // Show warning as no row of the JTable has been selected
            JOptionPane.showInternalMessageDialog(
                    null,
                    "Please select an item first!",
                    "Warning",
                    JOptionPane.WARNING_MESSAGE
            );
        }
    }//GEN-LAST:event_buyButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
         // get the index of the item selected
        yoFishItemSelectedIndex = yoFishTable.getSelectedRow();
        
        // Check if an item is selected from the table
        if (yoFishTable.getSelectedRow() >= 0) {
            
            String item = yoFishItemList.get(yoFishItemSelectedIndex).getItem();
            int stock = yoFishItemList.get(yoFishItemSelectedIndex).getStock();
            
            // Create an input options array for the available stock
            Integer[] options = new Integer[16];

            // populate the options array
            for (int value = 5; value <= 20; value++) {
                options[value - 5] = value;
            }

            // Create an input dialog displaying the options array
            Object inputValue = JOptionPane.showInputDialog(
                    null,
                    "Please select quantity to add of : \n" +
                    item,
                    "Quantity to restock",
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    options,
                    options[0]
            );

            // check if input value is null
            if (inputValue != null) {
                int addStock = (int) inputValue;

                // Call the add method
                addItem(addStock);
            }
        }
        else{
            // Show warning as no row of the JTable has been selected
            JOptionPane.showInternalMessageDialog(
                    null,
                    "Please select an item first!",
                    "Warning",
                    JOptionPane.WARNING_MESSAGE
            );
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void quitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitButtonActionPerformed
        // TODO add your handling code here:
        int quitting = JOptionPane.showConfirmDialog(
                null,
                "Are you sure you want to quit?",
                "Confirmaition for exit",
                JOptionPane.YES_NO_OPTION
        );
        
        if(quitting == JOptionPane.YES_OPTION)
        {
            // Save user data to an output file
            saveData();
            // Call the user defined quit method
            quitYoFishSystem();
        }
    }//GEN-LAST:event_quitButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // Save user data to an output file
        saveData();
        // Call the user defined quit method
        quitYoFishSystem();
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(YoFishGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(YoFishGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(YoFishGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(YoFishGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new YoFishGUI().setVisible(true);
            }
        });
    }
    
    // List all user defined methods below
    
    //Load Yo-Fish data in the ArrayList
    static void loadData()
    {
        // Reading the input csv file
        try (Scanner fileScanner = new Scanner(new File("./yo-fish.txt")))
        {
            fileScanner.useDelimiter(",");
            
            // if file is empty
            if(!fileScanner.hasNext())
            {
                // Show warning dialog
                JOptionPane.showInternalMessageDialog(
                    null,
                    "Input file is empty",
                    "Terminating the Application",
                    JOptionPane.WARNING_MESSAGE
                );
                System.exit(0);
            }          
            // if file has some content
            while(fileScanner.hasNext())
            {
                String lineValues [] =  fileScanner.nextLine().split(",");
                try
                {
                    yoFishItemList.add(new YoFishItem(Integer.parseInt(lineValues[0]), lineValues[1],Double.parseDouble(lineValues[2]),
                            Integer.parseInt(lineValues[3]), Double.parseDouble(lineValues[4]), Integer.parseInt(lineValues[5]),
                            Integer.parseInt(lineValues[6])));
                }
                // Catch any exception while parsing the content of the file
                catch (Exception ex)
                {
                    // Show warning dialog
                    JOptionPane.showInternalMessageDialog(
                        null,
                        "Input data in the file is invalid",
                        "Terminating the Application",
                        JOptionPane.WARNING_MESSAGE
                    );
                    System.exit(0);
                }
            }          
        } 
        // Catch any exception while reading the file
        catch (Exception ex)
        {
            // Show warning dialog
            JOptionPane.showInternalMessageDialog(
                    null,
                    "Error : " + ex.getMessage(),
                    "Terminating the Application",
                    JOptionPane.WARNING_MESSAGE
            );
            System.exit(0);
        }
        
    }
    
    //Load PondLife data in and append the same ArrayList
    static void loadPondLifeData()
    {
        // Reading the input csv file
        try (Scanner fileScanner = new Scanner(new File("./pondlife.txt")))
        {
            fileScanner.useDelimiter(",");
            
            // if file is empty
            if(!fileScanner.hasNext())
            {
                // Show warning dialog
                JOptionPane.showInternalMessageDialog(
                    null,
                    "Input file is empty",
                    "Terminating the Application",
                    JOptionPane.WARNING_MESSAGE
                );
                System.exit(0);
            }          
            // if file has some content
            while(fileScanner.hasNext())
            {
                String lineValues [] =  fileScanner.nextLine().split(",");
                try
                {
                    yoFishItemList.add(new YoFishItem(Integer.parseInt(lineValues[0]), lineValues[1],Double.parseDouble(lineValues[6]),
                            Integer.parseInt(lineValues[7]), Double.parseDouble(lineValues[3]), Integer.parseInt(lineValues[4]),
                            Integer.parseInt(lineValues[5])));
                }
                // Catch any exception while parsing the content of the file
                catch (Exception ex)
                {
                    // Show warning dialog
                    JOptionPane.showInternalMessageDialog(
                        null,
                        "Input data in the file is invalid",
                        "Terminating the Application",
                        JOptionPane.WARNING_MESSAGE
                    );
                    System.exit(0);
                }
            }          
        } 
        // Catch any exception while reading the file
        catch (Exception ex)
        {
            // Show warning dialog
            JOptionPane.showInternalMessageDialog(
                    null,
                    "Error : " + ex.getMessage(),
                    "Terminating the Application",
                    JOptionPane.WARNING_MESSAGE
            );
            System.exit(0);
        }
        
    }
    
    // Initialize the JTable
    void initTable() {
        
        dataModel = new YoFishTableModel(columnNames, yoFishItemList);
        
        //link JTable to the table model
        yoFishTable.setModel(dataModel);
        
        //set column headers for the JTable
        for (int col = 0; col < yoFishTable.getColumnCount(); col++) {
            
            // create a column variable of the current column
            TableColumn column = yoFishTable.getTableHeader().getColumnModel().getColumn(col);
            
            // set header for that column
            column.setHeaderValue(columnNames[col]);
        }
    }
    
    // Buy stock from array list as well as table model
    void buyItem(int buyStock)
    {
        // Update the stock in the array list
        int newStock = yoFishItemList.get(yoFishItemSelectedIndex).getStock() - buyStock;
        yoFishItemList.get(yoFishItemSelectedIndex).setStock(newStock);
        
        // Update the stock in Table model
        yoFishTable.setValueAt(newStock, yoFishItemSelectedIndex, 3);
        
        String item = yoFishItemList.get(yoFishItemSelectedIndex).getItem();
        double price = yoFishItemList.get(yoFishItemSelectedIndex).getPrice();
        
        // Show user information regarding the sale
        JOptionPane.showMessageDialog(
                null, 
                "Item : " + item + "\n" +
                "Price : " + String.format("£ %.2f", price) + "\n" +
                "Units bought : " + buyStock + "\n" +
                "Stock remaining : " + newStock + "\n", 
                "Confirmation of Sale", 
                JOptionPane.INFORMATION_MESSAGE
        );
    }
    
    // Add stock to array list as well as table model
    void addItem(int addStock)
    {
        // Update the stock in the array list
        int newStock = yoFishItemList.get(yoFishItemSelectedIndex).getStock() + addStock;
        yoFishItemList.get(yoFishItemSelectedIndex).setStock(newStock);
        
        // Update the stock in Table model
        yoFishTable.setValueAt(newStock, yoFishItemSelectedIndex, 3);
        
        String item = yoFishItemList.get(yoFishItemSelectedIndex).getItem();
        double price = yoFishItemList.get(yoFishItemSelectedIndex).getPrice();
        
        // Show user information regarding the restock
        JOptionPane.showMessageDialog(
                null, 
                "Item : " + item + "\n" +
                "Units added : " + addStock + "\n" +
                "New Stock : " + newStock + "\n", 
                "Confirmation of Added Stock", 
                JOptionPane.INFORMATION_MESSAGE
        );
    }
    
    void loadYoFishImages()
    {
        // Loop through the yo fish item array list
        for(YoFishItem item: yoFishItemList)
        {
            // create the full path to current image
            String path = "./pics/" + item.getPicFilename();
            
            // create a defualt buffered image object to add to the buffered image array list
            BufferedImage image = null;
            
            //try to load current image
            try {
                image = ImageIO.read(new File(path));
            } 
            // Catch any exception occuring while loading the image
            catch (Exception ex) {
                
            } finally {
                yoFishImagesList.add(image);
            }
        }
    }
    
    // Display image in the picLabel
    void displayImage()
    {
        // clear any pic or text in the picLabel
        picLabel.setText("");
        picLabel.setIcon(null);
        
        // clear the existing item label
        itemLabel.setText("");
        // set the current item name as label;
        String itemName = yoFishItemList.get(yoFishItemSelectedIndex).getItem();
        itemLabel.setText(itemName);
        
        // create a buffered image object of the currently selected item from the image list
        BufferedImage currentImage = yoFishImagesList.get(yoFishItemSelectedIndex);
        
        // if image for that item is not available
        if (currentImage == null)
        {
            picLabel.setText("Image not available");
        }
        else
        {
            // create an image icon object
            ImageIcon currentIcon = new ImageIcon(currentImage);
            
            // set the icon on the pic label
            picLabel.setIcon(currentIcon);
        }
        
    }
    
    // Check if an item's stock is low and show a warning dialog
    void checkLowStock()
    {
        int availableStock = yoFishItemList.get(yoFishItemSelectedIndex).getStock();
        String item = yoFishItemList.get(yoFishItemSelectedIndex).getItem();
             
        // Ckeck if available stock is less than 5
        // cheking the previous selected index not equal to the current to avoid a loop of low stock warnings when clicking or keypressing for an item
        if(availableStock < 5 && prevSelectedItemIndex != yoFishItemSelectedIndex)
        {
            // Show warning if the item has low stock
            JOptionPane.showInternalMessageDialog(
                    null,
                    "'" + item + "' " + "has " + availableStock + " units of stock!" ,
                    "Warning",
                    JOptionPane.WARNING_MESSAGE
            );
        }
        
    }
    
    static void saveData() {
        // try to create a new output file and writing content in it
        try (PrintWriter writer = new PrintWriter(new FileWriter("./output.txt"))) 
        {
            for(YoFishItem item: yoFishItemList)
            {
                writer.println(item.getId() + "," + item.getItem() + "," + item.getPrice() + "," + item.getStock() + "," +
                        item.getMaxSize() + "," + item.getLowTemp() + "," + item.getHighTemp());
            }
            System.out.println("Data saved successfully to output.txt");
        } 
        // Catch any exception while file creation or writing the output file
        catch (Exception ex) {
            System.out.println("*Unable to save data to output.txt*");
        }
    }
    
    // User defined method to exit the program
    void quitYoFishSystem()
    {
        System.exit(0);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton buyButton;
    private javax.swing.JLabel itemLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel picLabel;
    private javax.swing.JPanel picPanel;
    private javax.swing.JButton quitButton;
    private javax.swing.JTable yoFishTable;
    // End of variables declaration//GEN-END:variables

    // User defined variables to be listed here
    static List<YoFishItem> yoFishItemList = new ArrayList <>();
   
    // storing the previous selected index to check if it's not equal to the current to avoid a loop of low stock warnings when clicking or keypressing for an item
    private int prevSelectedItemIndex = -1;
    
    private int yoFishItemSelectedIndex = -1;
    private String[] columnNames = {"id", "item", "price", "stock", "maxSize", "lowTemp", "HighTemp"};
    private YoFishTableModel dataModel;
    
    private ArrayList<BufferedImage> yoFishImagesList = new ArrayList<>();
    
    
}
